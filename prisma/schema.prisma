// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members      Member[]
  expenses     Expense[]
  resources    Resource[]

  @@map("groups")
}

model Member {
  id         String    @id @default(cuid())
  name       String
  email      String?
  iban       String?
  groupId    String
  activeFrom DateTime  @default(now())
  activeTo   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  group              Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidExpenses       Expense[]            @relation("PaidBy")
  expenseMembers     ExpenseMember[]
  consumptionMembers ConsumptionMember[]

  @@map("members")
}

model Expense {
  id                 String    @id @default(cuid())
  title              String
  description        String?
  amount             Decimal   @db.Decimal(10, 2)
  date               DateTime  @default(now())
  groupId            String
  paidById           String
  splitAll           Boolean   @default(false) // If true, split between all members (including future ones)
  isRecurring        Boolean   @default(false)
  recurringType      String? // 'weekly', 'monthly', 'yearly'
  recurringStartDate DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  group          Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy         Member          @relation("PaidBy", fields: [paidById], references: [id], onDelete: Cascade)
  expenseMembers ExpenseMember[]

  @@map("expenses")
}

model ExpenseMember {
  id        String   @id @default(cuid())
  expenseId String
  memberId  String
  amount    Decimal  @db.Decimal(10, 2) // How much this member owes for this expense
  createdAt DateTime @default(now())

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([expenseId, memberId])
  @@map("expense_members")
}

model Resource {
  id          String   @id @default(cuid())
  name        String
  description String?
  unit        String?  // e.g., "hours", "rolls", "km"
  unitPrice   Decimal? @db.Decimal(10, 2) // price per unit
  groupId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  group       Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  consumptions Consumption[]

  @@map("resources")
}

model Consumption {
  id           String   @id @default(cuid())
  resourceId   String
  amount       Decimal  @db.Decimal(10, 2) // either money amount or unit amount
  isUnitAmount Boolean  @default(false) // true if amount is in units, false if in money
  date         DateTime @default(now())
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  resource     Resource           @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  consumptionMembers ConsumptionMember[]

  @@map("consumptions")
}

model ConsumptionMember {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  consumptionId String
  memberId      String
  amount        Decimal  @db.Decimal(10, 2) // amount this member owes

  // Relations
  consumption   Consumption @relation(fields: [consumptionId], references: [id], onDelete: Cascade)
  member        Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([consumptionId, memberId])
  @@map("consumption_members")
}
